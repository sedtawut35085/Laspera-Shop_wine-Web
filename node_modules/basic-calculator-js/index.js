
const invalidnumbers = new Error("You need to provide to valid numbers to operate!");
const notanumber = new Error("Numbers given aren't numbers.");
const pi =  Math.PI;
const e = Math.E;

function add(summand1, summand2) {
    if(!summand1 || !summand2) {
        throw invalidnumbers;
    } else if(isNaN(summand1) || isNaN(summand2)){
        throw notanumber;
    } else {
        return sum = summand1 + summand2
    }
}

function subtract(minuend, subtrahend) {
    if(!minuend || !subtrahend) {
        throw invalidnumbers;
    } else if(isNaN(minuend) || isNaN(subtrahend)){
        throw notanumber;
    } else {
        return difference = minuend - subtrahend
    }
}

function multiply(factor1, factor2) {
    if(!factor1 || !factor2) {
        throw invalidnumbers;
    } else if(isNaN(factor2) || isNaN(factor2)) {
        throw notanumber;
    } else {
        return product = factor1 * factor2
    }
}

function divide(dividend, divisor) {
    if(!dividend || !divisor) {
        throw invalidnumbers;
    } else if(isNaN(dividend) || isNaN(divisor)) {
        throw notanumber;
    } else if(divisor === 0) {
        throw new Error("Divisor must be a value greater than zero!")
    } else {
        return quotient = dividend / divisor;
    }
}
function modulation(dividend, divisor) {
    if(!dividend || !divisor) {
        throw invalidnumbers;
    } else if(isNaN(dividend) || isNaN(divisor)) {
        throw notanumber;
    } else if(divisor === 0) {
        throw new Error("Divisor must be a value greater than zero!")
    } else {
        return remainder = dividend % divisor;
    }
}

function elevate(base, exponent) {
    if(!base || !exponent) {
        throw invalidnumbers;
    } else if(isNaN(base) || isNaN(exponent)) {
        throw notanumber;
    } else {
        return power = base ** exponent;
    }
}

function sqrt(value) {
    if(!value) {
        throw invalidnumbers;
    } else if (isNaN(value)) {
        throw notanumber;
    } else {
        return sqroot = Math.sqrt(value)
    }
}

module.exports = {
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    modulation: modulation,
    elevate: elevate,
    sqrt: sqrt,
    pi: pi,
    e: e
}
